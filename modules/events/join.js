'use strict';
export const config = {
    name: 'join',
    version: '1.0.0',
    author: ['Sky'],
    viDesc: 'Th√¥ng b√°o ng∆∞·ªùi d√πng v√†o nh√≥m.',
    enDesc: 'Notify users into groups.',
    eventType: ["log:subscribe"]
};
export const languages = {
    "vi_VN": {
        "botWecome": "üî± K·∫øt n·ªëi th√†nh c√¥ng v·ªõi SkyùóïùóºùòÅ ‚úåÔ∏è!\n\nüçìS·ª≠ d·ª•ng '%1help all' ƒë·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh c√≥ tr√™n bot n√†y\n‚ôªÔ∏èS·ª≠ d·ª•ng: %2language vietnames/english ƒë·ªÉ ch·ªçn ng√¥n ng·ªØ cho nh√≥m tr√≤ chuy·ªán c·ªßa b·∫°n\n\nüî∑üé≠Admin nh√† ƒëi·ªÅu h√†nh bot: \nFb.com/support.manhict",
        "wecDefault": "üëãWelcome {userName}.\nCh√†o m·ª´ng {multiple} ƒë√£ ƒë·∫øn v·ªõi: {boxName}\nL√† th√†nh vi√™n th·ª© {member} c·ªßa nh√≥m.\nCh√∫c {multiple} c√≥ m·ªôt bu·ªïi {session} vui v·∫ª =)",
        "friend": "b·∫°n",
        "friends": "c√°c b·∫°n",
        "morning": "s√°ng",
        "noon": "tr∆∞a",
        "afternoon": "chi·ªÅu",
        "night": "t·ªëi"
    },
    "en_US": {
        "botWecome": "üî±ü™ÇSuccessfully connected with SkyùóïùóºùòÅ ‚úåÔ∏è!\n\nüçìUse '%1help all' to see all commands present on this bot\n‚ôªÔ∏èUse: %2language vietnames/english to select the language for your chat group\n\nüî∑üé≠Admin bot operator:\nFb.com/support.manhict",
        "wecDefault": "üëãWelcome {userName}.\nWelcome {multiple} to: {boxName}\nBe the {member} member of the group.\nWish {multiple} a happy {session} =)",
        "friend": "you",
        "friends": "friends",
        "morning": "morning",
        "noon": "noon",
        "afternoon": "afternoon",
        "night": "night"
    }
}
import * as fs from "fs"
import moment from "moment-timezone"
export async function onMessage({ event, api, Config, message, Threads, Users, getText }) {
    const { threadID } = event;
    const hours = moment.tz("Asia/Ho_Chi_Minh").format("HH");
    const getPrefix = (await Threads.getData(threadID).prefix) || Config['PREFIX'];
    // check data

    if (!global.data.allThreadID.find(e => e == threadID)) return;
    const dataThread = await Threads.getData(threadID);
    const threadData = dataThread.data || {};
    // if (threadData.sendWelcomeMessage != true) return;
    // N·∫øu l√† bot;
    
    if (event.logMessageData.addedParticipants.some(item => item.userFbId == api.getCurrentUserID())) {
        await Threads.setStatus(event.threadID, true);
        api.changeNickname(`„Äò ${getPrefix} „Äô‚û§ Sky‚ù§Ô∏èùóïùóºùòÅ ‚úåÔ∏è`, threadID, api.getCurrentUserID());
        return message.send(getText("botWecome", getPrefix, getPrefix));
    }
    // N·∫øu l√† th√†nh vi√™n m·ªõi:
    
    const boxName = dataThread.name;
    var userName = [],
        mentions = [],
        memLength = [],
        i = 0;
    let participantIDs = (event.participantIDs).length;
    let multiple = false;
    const dataAddedParticipants = event.logMessageData.addedParticipants;
    if (dataAddedParticipants.length > 1) multiple = true;
    for (let user of dataAddedParticipants) {
        userName.push(user.fullName);
        memLength.push(participantIDs - i++);
        mentions.push({
            tag: user.fullName,
            id: user.userFbId
        });
    }
    memLength.sort((a, b) => a - b);
    // {userName}: t√™n c·ªßa th√†nh vi√™n m·ªõi
    // {boxName}:  t√™n c·ªßa nh√≥m chat
    // {multiple}: b·∫°n || c√°c b·∫°n
    // {session}:  bu·ªïi trong ng√†y
    const messageWelcomeDefault = getText("wecDefault");
    let messageWelcome = threadData.welcomeMessage || messageWelcomeDefault;
    messageWelcome = messageWelcome
        .replace(/\{userName}/g, userName.join(", "))
        .replace(/\{boxName}/g, boxName)
        .replace(/\{member}/g, memLength.join(", "))
        .replace(/\{multiple}/g, multiple ? getText("friends") : getText("friend"))
        .replace(/\{session}/g, hours <= 10 ? getText("morning") :
            hours > 10 && hours <= 12 ? getText("noon") :
            hours > 12 && hours <= 18 ? getText("afternoon") : getText("night"));

    const form = {
        body: messageWelcome,
        mentions
    };
    await Threads.increaseMember(threadID, participantIDs);
    threadData.welcomeAttachment ? form.attachment = fs.createReadStream(process.cwd() + "/modules/events/src/mediaWelcome/" + threadData.welcomeAttachment) : "";

    message.send(form);
}
